{"ast":null,"code":"var _jsxFileName = \"/Users/ridhoizzulhaq/tiket-dapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = '0x88bdEB822Fa9c8D8341dECA25c95072a72F48701'; // Replace with the actual contract address\n\nconst App = () => {\n  _s();\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  const loadBlockchainData = async () => {\n    try {\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        await window.ethereum.enable();\n        const web3 = window.web3;\n        const accounts = await web3.eth.getAccounts();\n        setAccount(accounts[0]);\n        const contractInstance = new web3.eth.Contract([\n          // Contract ABI\n          // ...\n        ], CONTRACT_ADDRESS);\n        setContract(contractInstance);\n      } else {\n        window.alert('Please install Metamask to use this DApp.');\n      }\n    } catch (error) {\n      console.log(error);\n      window.alert('Failed to load blockchain data.');\n    }\n  };\n  const validateOwnership = async () => {\n    if (contract && account) {\n      try {\n        const dataToSign = account.toLowerCase() + ' owns token with ID 1';\n        const signature = await window.ethereum.request({\n          method: 'personal_sign',\n          params: [dataToSign, account],\n          from: account\n        });\n        const balance = await contract.methods.balanceOf(account, 1).call();\n        const isSignedByOwner = await contract.methods.isSignedByOwner(account, 1, signature).call();\n        setIsOwner(balance > 0 && isSignedByOwner);\n      } catch (error) {\n        console.log(error);\n        window.alert('Failed to validate ownership.');\n      }\n    }\n  };\n  const handleValidation = async () => {\n    validateOwnership();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleValidation,\n      children: \"Validate Ownership\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), isOwner ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"NFT Terdeteksi, silakan masuk\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Gagal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 57\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"RQCDaonUjBoeiVU5d+9iMsIDrt8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Web3","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","App","_s","contract","setContract","account","setAccount","isOwner","setIsOwner","loadBlockchainData","window","ethereum","web3","enable","accounts","eth","getAccounts","contractInstance","Contract","alert","error","console","log","validateOwnership","dataToSign","toLowerCase","signature","request","method","params","from","balance","methods","balanceOf","call","isSignedByOwner","handleValidation","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ridhoizzulhaq/tiket-dapp/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\n\nconst CONTRACT_ADDRESS = '0x88bdEB822Fa9c8D8341dECA25c95072a72F48701'; // Replace with the actual contract address\n\nconst App = () => {\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n\n  const loadBlockchainData = async () => {\n    try {\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        await window.ethereum.enable();\n        const web3 = window.web3;\n        const accounts = await web3.eth.getAccounts();\n        setAccount(accounts[0]);\n\n        const contractInstance = new web3.eth.Contract(\n          [\n            // Contract ABI\n            // ...\n          ],\n          CONTRACT_ADDRESS\n        );\n        setContract(contractInstance);\n      } else {\n        window.alert('Please install Metamask to use this DApp.');\n      }\n    } catch (error) {\n      console.log(error);\n      window.alert('Failed to load blockchain data.');\n    }\n  };\n\n  const validateOwnership = async () => {\n    if (contract && account) {\n      try {\n        const dataToSign = account.toLowerCase() + ' owns token with ID 1';\n        const signature = await window.ethereum.request({\n          method: 'personal_sign',\n          params: [dataToSign, account],\n          from: account,\n        });\n\n        const balance = await contract.methods.balanceOf(account, 1).call();\n        const isSignedByOwner = await contract.methods\n          .isSignedByOwner(account, 1, signature)\n          .call();\n\n        setIsOwner(balance > 0 && isSignedByOwner);\n      } catch (error) {\n        console.log(error);\n        window.alert('Failed to validate ownership.');\n      }\n    }\n  };\n\n  const handleValidation = async () => {\n    validateOwnership();\n  };\n\n  return (\n    <div>\n      <button onClick={handleValidation}>Validate Ownership</button>\n      {isOwner ? <p>NFT Terdeteksi, silakan masuk</p> : <p>Gagal</p>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,gBAAgB,GAAG,4CAA4C,CAAC,CAAC;;AAEvE,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACdc,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,IAAIC,MAAM,CAACC,QAAQ,EAAE;QACnBD,MAAM,CAACE,IAAI,GAAG,IAAIf,IAAI,CAACa,MAAM,CAACC,QAAQ,CAAC;QACvC,MAAMD,MAAM,CAACC,QAAQ,CAACE,MAAM,CAAC,CAAC;QAC9B,MAAMD,IAAI,GAAGF,MAAM,CAACE,IAAI;QACxB,MAAME,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAG,CAACC,WAAW,CAAC,CAAC;QAC7CV,UAAU,CAACQ,QAAQ,CAAC,CAAC,CAAC,CAAC;QAEvB,MAAMG,gBAAgB,GAAG,IAAIL,IAAI,CAACG,GAAG,CAACG,QAAQ,CAC5C;UACE;UACA;QAAA,CACD,EACDlB,gBACF,CAAC;QACDI,WAAW,CAACa,gBAAgB,CAAC;MAC/B,CAAC,MAAM;QACLP,MAAM,CAACS,KAAK,CAAC,2CAA2C,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBV,MAAM,CAACS,KAAK,CAAC,iCAAiC,CAAC;IACjD;EACF,CAAC;EAED,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAIpB,QAAQ,IAAIE,OAAO,EAAE;MACvB,IAAI;QACF,MAAMmB,UAAU,GAAGnB,OAAO,CAACoB,WAAW,CAAC,CAAC,GAAG,uBAAuB;QAClE,MAAMC,SAAS,GAAG,MAAMhB,MAAM,CAACC,QAAQ,CAACgB,OAAO,CAAC;UAC9CC,MAAM,EAAE,eAAe;UACvBC,MAAM,EAAE,CAACL,UAAU,EAAEnB,OAAO,CAAC;UAC7ByB,IAAI,EAAEzB;QACR,CAAC,CAAC;QAEF,MAAM0B,OAAO,GAAG,MAAM5B,QAAQ,CAAC6B,OAAO,CAACC,SAAS,CAAC5B,OAAO,EAAE,CAAC,CAAC,CAAC6B,IAAI,CAAC,CAAC;QACnE,MAAMC,eAAe,GAAG,MAAMhC,QAAQ,CAAC6B,OAAO,CAC3CG,eAAe,CAAC9B,OAAO,EAAE,CAAC,EAAEqB,SAAS,CAAC,CACtCQ,IAAI,CAAC,CAAC;QAET1B,UAAU,CAACuB,OAAO,GAAG,CAAC,IAAII,eAAe,CAAC;MAC5C,CAAC,CAAC,OAAOf,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClBV,MAAM,CAACS,KAAK,CAAC,+BAA+B,CAAC;MAC/C;IACF;EACF,CAAC;EAED,MAAMiB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnCb,iBAAiB,CAAC,CAAC;EACrB,CAAC;EAED,oBACExB,OAAA;IAAAsC,QAAA,gBACEtC,OAAA;MAAQuC,OAAO,EAAEF,gBAAiB;MAAAC,QAAA,EAAC;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC7DnC,OAAO,gBAAGR,OAAA;MAAAsC,QAAA,EAAG;IAA6B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAAG3C,OAAA;MAAAsC,QAAA,EAAG;IAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEV,CAAC;AAACxC,EAAA,CApEID,GAAG;AAAA0C,EAAA,GAAH1C,GAAG;AAsET,eAAeA,GAAG;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}