{"ast":null,"code":"var _jsxFileName = \"/Users/ridhoizzulhaq/tiket-dapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport TiketContract from \"./contracts/Tiket.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      setWeb3(window.web3);\n    }\n    // Handle case where user doesn't have Metamask installed\n    else {\n      window.alert(\"Non-Ethereum browser detected. Please install MetaMask extension.\");\n    }\n  };\n  const loadBlockchainData = async () => {\n    if (web3) {\n      const networkId = await web3.eth.net.getId();\n      const networkData = TiketContract.networks[networkId];\n      if (networkData) {\n        const contractInstance = new web3.eth.Contract(TiketContract.abi, networkData.address);\n        setContract(contractInstance);\n        const accounts = await web3.eth.getAccounts();\n        setAccount(accounts[0]);\n      } else {\n        window.alert(\"Contract not deployed to the current network.\");\n      }\n    }\n  };\n  const validateOwnership = async () => {\n    if (contract && account) {\n      const balance = await contract.methods.balanceOf(account, 1).call();\n      setIsOwner(balance > 0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NFT Access Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), isOwner ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Anda berhak masuk\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gagal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 47\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateOwnership,\n      children: \"Validate Ownership\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZNT+ST7h26q7Avw0KmTAg6rLmpE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","TiketContract","jsxDEV","_jsxDEV","App","_s","web3","setWeb3","contract","setContract","account","setAccount","isOwner","setIsOwner","loadWeb3","loadBlockchainData","window","ethereum","enable","alert","networkId","eth","net","getId","networkData","networks","contractInstance","Contract","abi","address","accounts","getAccounts","validateOwnership","balance","methods","balanceOf","call","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ridhoizzulhaq/tiket-dapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport TiketContract from \"./contracts/Tiket.json\";\n\nfunction App() {\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      setWeb3(window.web3);\n    }\n    // Handle case where user doesn't have Metamask installed\n    else {\n      window.alert(\n        \"Non-Ethereum browser detected. Please install MetaMask extension.\"\n      );\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    if (web3) {\n      const networkId = await web3.eth.net.getId();\n      const networkData = TiketContract.networks[networkId];\n      if (networkData) {\n        const contractInstance = new web3.eth.Contract(\n          TiketContract.abi,\n          networkData.address\n        );\n        setContract(contractInstance);\n        const accounts = await web3.eth.getAccounts();\n        setAccount(accounts[0]);\n      } else {\n        window.alert(\"Contract not deployed to the current network.\");\n      }\n    }\n  };\n\n  const validateOwnership = async () => {\n    if (contract && account) {\n      const balance = await contract.methods.balanceOf(account, 1).call();\n      setIsOwner(balance > 0);\n    }\n  };\n\n  return (\n    <div>\n      <h1>NFT Access Control</h1>\n      {isOwner ? <h2>Anda berhak masuk</h2> : <h2>Gagal</h2>}\n      <button onClick={validateOwnership}>Validate Ownership</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}